values = c(0,.5,1),
na.value = "white")+
# tidyterra::scale_fill_whitebox_b(palette = "muted", breaks=breaks)+
tidyterra::geom_spatvector(data=shp  %>% crop(rrci[[.x]]), fill=NA)+
# geom_spatvector_label(data=shp  %>% crop(rrci[[.x]]), mapping = aes(label = id))+
ggplot2::theme_void()+
ggspatial::annotation_scale(height = unit(0.1, "cm"))+
theme(legend.position = ifelse(.x==id_c1, "bottom","none"),
legend.key.width=unit(50,"pt"),
legend.key.height = unit(5,"pt"),
legend.title = element_blank(),
legend.margin = margin(b = 5, l = 5),
plot.title.position = "panel",
panel.border = element_rect(colour = "gray", fill = NA)
)+
# aspect.ratio = ta$V1[.x]/ta$V2[.x])+
labs(title = ifelse(.x==id_c1, names(rr),""))
)
print(m); print(ww);print(hh)
ggpubr::ggarrange(plotlist = ggi)
# gridExtra::grid.arrange(grobs = ggi, layout_matrix = m,
#                         widths = ww/sum(ww),
#                         heights = hh/sum(hh))
}
visu_terra_plot(r$insol2021, n=10  ,  brk = "linear")
col
col = c("blue", "beige", "red")
n =  20
qmm = c(.05, .95)
brk = "linear"
s <- dc("shp") %>% group_by(CCOD_FRT) %>% summarise() %>% st_cast("POLYGON")
rrc <- map(1:nrow(s), ~ rr %>% crop(s %>% slice(.x)))
ta0 <- map_dfc(rrc, ~dim(.x)) %>% t() %>% as.data.frame() %>%
mutate(id = row.names(.) %>% as.factor() %>% as.numeric())
for(n in 1:(nrow(ta)-1)){
if(n==1){
assign(paste0("ta",n), get(paste0("ta",n-1)) %>%
mutate(pv1 = V1/sum(V1), pv2 = V2/sum(V2)) %>% arrange(desc(V1)))
}else{
assign(paste0("ta",n), get(paste0("ta",n-1)) %>% slice(-1) %>%
mutate(pv1 = V1/sum(V1), pv2 = V2/sum(V2)) %>% arrange(desc(V1)))
}
tmp <- get(paste0("ta",n))
assign(paste0("dim",n), ifelse(tmp$pv1[1]>tmp$pv2[1], "row", "col"))
assign(paste0("idA",n), tmp %>% slice(1) %>% pull(id))
assign(paste0("idB",n), tmp %>% slice(-1) %>% pull(id))
}
hh <- ww <- 0
m <- NULL
for(n in (nrow(ta)-1):1){
ida <- get(paste0("idA", n))
idb <- get(paste0("idB", n))
dima <- get(paste0("dim", n))
if(is.null(m)){
m <- matrix(c(ida, idb),
ncol = ifelse(dima == "row", 2, 1))
hw <- ta %>% filter(id %in% c(ida, idb)) %>% pull(ifelse(dima=="row", V2, V1)) %>% max()
wh <- c(
ta0 %>% filter(id %in% c(ida)) %>% pull(ifelse(dima!="row", V2, V1)) ,
ta0 %>% filter(id %in% c(idb)) %>% pull(ifelse(dima!="row", V2, V1))
)
if(dima=="row"){
hh <- hw; ww <- wh
}else{
hh <- wh; ww <- hw
}
}else if(dima == "col"){
m <- rbind(rep(ida, ncol(m)), m)
hh <- c(ta0 %>% filter(id == ida) %>% pull(V2), hh)
wi <- ta0 %>% filter(id == ida) %>% pull(V1)
ww <- ww*max(1, wi/sum(ww))
}else{
m <- cbind(rep(ida, nrow(m)), m)
ww <- c(ta0 %>% filter(id == ida) %>% pull(V1), ww)
hi <- ta0 %>% filter(id == ida) %>% pull(V2)
hh <- hh*max(1, hi/sum(hh))
}
}
m
borne <- values(rr) %>% quantile(probs=qmm, na.rm=TRUE)
if(brk == "quantile"){
breaks <- c(-Inf,
quantile(values(rr), na.rm = TRUE,
probs = qmm[1] + (qmm[2]-qmm[1])/(n-2) * 0:(n-2)),
+Inf)
}
if(brk == "linear"){
breaks <- c(-Inf,
borne[1] + (borne[2]-borne[1])/(n-2) * 0:(n-2)) %>% util.round()
}
shp <- dc("shp") %>% select(id) %>% as("SpatVector")
ggi <- map(1:length(rrc),
~ggplot()+
tidyterra::geom_spatraster(data=rrc[[.x]])+
scale_fill_stepsn(colors = col, breaks = breaks,
guide = "legend",
values = c(0,.5,1),
na.value = "white")+
# tidyterra::scale_fill_whitebox_b(palette = "muted", breaks=breaks)+
tidyterra::geom_spatvector(data=shp  %>% crop(rrci[[.x]]), fill=NA)+
# geom_spatvector_label(data=shp  %>% crop(rrci[[.x]]), mapping = aes(label = id))+
ggplot2::theme_void()+
ggspatial::annotation_scale(height = unit(0.1, "cm"))+
theme(legend.position = ifelse(.x==id_c1, "bottom","none"),
legend.key.width=unit(50,"pt"),
legend.key.height = unit(5,"pt"),
legend.title = element_blank(),
legend.margin = margin(b = 5, l = 5),
plot.title.position = "panel",
panel.border = element_rect(colour = "gray", fill = NA)
)+
# aspect.ratio = ta$V1[.x]/ta$V2[.x])+
labs(title = ifelse(.x==id_c1, names(rr),""))
)
gg3 <- ggpubr::ggarrange(plotlist = ggi[[c(idA3, idB3)]], ncol = ifelse(dim3=="row", 2, 1))
c(idA3, idB3)
ggi[[c(idA3, idB3)]]
ggi[c(idA3, idB3)]
gg3 <- ggpubr::ggarrange(plotlist = ggi[c(idA3, idB3)], ncol = ifelse(dim3=="row", 2, 1))
ggi[idA2]
gg2 <- ggpubr::ggarrange(ggi[idA2], gg3, ncol = ifelse(dim2=="row", 2, 1))
gg1 <- ggpubr::ggarrange(ggi[idA1], gg2, ncol = ifelse(dim1=="row", 2, 1))
gg1
gg3
gg2 <- ggpubr::ggarrange(plotlist = list(ggi[idA2]), gg3, ncol = ifelse(dim2=="row", 2, 1))
gg2
gg3 <- ggpubr::ggarrange(plotlist = ggi[c(idA3, idB3)], ncol = ifelse(dim3=="row", 2, 1))
gg2 <- ggpubr::ggarrange(plotlist = list(ggi[idA2]), gg3, ncol = ifelse(dim2=="row", 2, 1))
gg2 <- ggpubr::ggarrange(plotlist = list(ggi[idA2], gg3), ncol = ifelse(dim2=="row", 2, 1))
gg2
gg2 <- ggpubr::ggarrange(plotlist = list(gg3, ggi[idA2]), ncol = ifelse(dim2=="row", 2, 1))
gg2
gg3
ggi[idA2]
ggpubr::
gg2 <- ggpubr::ggarrange(plotlist = list(ggi[idA2], ggpubr::as_ggplot(gg3)), ncol = ifelse(dim2=="row", 2, 1))
ggpubr::as_ggplot(gg3)
gg3 <- gridExtra::arrangeGrob(ggi[c(idA3, idB3)], ncol = ifelse(dim3=="row", 2, 1))
gg3 <- gridExtra::arrangeGrob(ggi[c(idA3, idB3)], ncol = ifelse(dim3=="row", 2, 1))
gg2 <- gridExtra::arrangeGrob((ggi[idA2], gg3, ncol = ifelse(dim2=="row", 2, 1))
gg3 <- gridExtra::arrangeGrob(ggi[c(idA3, idB3)], ncol = ifelse(dim3=="row", 2, 1))
gg2 <- gridExtra::arrangeGrob(ggi[idA2], gg3, ncol = ifelse(dim2=="row", 2, 1))
gg1 <- gridExtra::arrangeGrob(ggi[idA1], gg2, ncol = ifelse(dim1=="row", 2, 1))
gg1
gridExtra::grid.arrange(grobs = gg1)
gridExtra::grid.arrange(gg1)
gg3
ggi[c(idA3, idB3)]
gg3 <- gridExtra::arrangeGrob(ggi[[c(idA3)]], ggi[[idB3], ncol = ifelse(dim3=="row", 2, 1))
gg3 <- gridExtra::arrangeGrob(ggi[[idA3]], ggi[[idB3]], ncol = ifelse(dim3=="row", 2, 1))
gg2 <- gridExtra::arrangeGrob(ggi[[idA2]], gg3, ncol = ifelse(dim2=="row", 2, 1))
gg1 <- gridExtra::arrangeGrob(ggi[{idA1]], gg2, ncol = ifelse(dim1=="row", 2, 1))
gg1 <- gridExtra::arrangeGrob(ggi[[idA1]], gg2, ncol = ifelse(dim1=="row", 2, 1))
gridExtra::grid.arrange(gg1)
m
gg1
gridExtra::grid.arrange(gg1, padding = unit(0, "line"))
gg3 <- gridExtra::arrangeGrob(ggi[[idA3]], ggi[[idB3]], ncol = ifelse(dim3=="row", 2, 1),
padding = unit(0.1, "line"))
gg2 <- gridExtra::arrangeGrob(ggi[[idA2]], gg3, ncol = ifelse(dim2=="row", 2, 1),
padding = unit(0.1, "line"))
gg1 <- gridExtra::arrangeGrob(ggi[[idA1]], gg2, ncol = ifelse(dim1=="row", 2, 1),
padding = unit(0.1, "line"))
gridExtra::grid.arrange(gg1, padding = unit(0, "line"))
ggspatial::df_spatial(rr)
m
apply(m, 2, unique)
apply(m, 2, unique) %>% unlist() %>% table()
apply(m, 2, unique) %>% unlist() %>% table() %>% as.numeric()
fr_row <- apply(m, 2, unique) %>% unlist() %>% table() %>% as.numeric()
ww = ta0 %>% select(V1) %>% pull(V1) / fr_row
ta0 %>% select(V1) %>% pull(V1) / fr_row
ta0 %>% select(V1) %>% pull(V1)
ww <- ta0 %>% select(V1) %>% pull(V1) / fr_row
m
apply(m, 2, function(x) max(ww[x]))
gridExtra::grid.arrange(grobs = ggi,
layout_matrix = m,
widths = ww/sum(ww),
heights = hh/sum(hh))
fr_row <- apply(m, 2, unique) %>% unlist() %>% table() %>% as.numeric()
wiw <- ta0 %>% select(V1) %>% pull(V1) / fr_row
ww <- apply(m, 2, function(x) max(wiw[x]))
fr_col <- apply(m, 1, unique) %>% unlist() %>% table() %>% as.numeric()
hih <- ta0 %>% select(V2) %>% pull(V2) / fr_col
hh <- apply(m, 1, function(x) max(hih[x]))
gridExtra::grid.arrange(grobs = ggi,
layout_matrix = m,
widths = ww/sum(ww),
heights = hh/sum(hh))
ww
ta0
fr_row <- apply(m, 2, unique) %>% unlist() %>% table() %>% as.numeric()
wiw <- ta0 %>% pull(V2) / fr_row
ww <- apply(m, 2, function(x) max(wiw[x]))
fr_col <- apply(m, 1, unique) %>% unlist() %>% table() %>% as.numeric()
hih <- ta0 %>% pull(V1) / fr_col
hh <- apply(m, 1, function(x) max(hih[x]))
gridExtra::grid.arrange(grobs = ggi,
layout_matrix = m,
widths = ww/sum(ww),
heights = hh/sum(hh))
m
ww
ww <- apply(m, 2, function(x) wiw[x[which(fr_row[x]==1)]])
ww
ta0
ww <- apply(m, 2, function(x) wiw[x[which(fr_row[x]==1)]] %>% unlist() %>% unique())
fr_row <- apply(m, 2, unique) %>% unlist() %>% table() %>% as.numeric()
wiw <- ta0 %>% pull(V2)
ww <- apply(m, 2, function(x) wiw[x[which(fr_row[x]==1)]] %>% unlist() %>% unique())
fr_col <- apply(m, 1, unique) %>% unlist() %>% table() %>% as.numeric()
hih <- ta0 %>% pull(V1)
hh <- apply(m, 1, function(x) hih[x[which(fr_col[x]==1)]] %>% unlist() %>% unique())
hh <- apply(m, 1, function(x) hih[x[which(fr_col[x]==1)]] %>% unlist() %>% unique() %>% max())
gridExtra::grid.arrange(grobs = ggi,
layout_matrix = m,
widths = ww/sum(ww),
heights = hh/sum(hh))
gridExtra::grid.arrange(grobs = ggi,
layout_matrix = m,
widths = ww/sum(ww),
heights = hh/sum(ww),
vp = grid::viewport(
width = unit(1, "npc"),
height = unit(sum(hh)/sum(ww), "npc"),
))
gridExtra::grid.arrange(grobs = ggi,
layout_matrix = m,
widths = ww/sum(ww),
heights = hh/sum(ww),
vp = grid::viewport(
width = unit(1, "npc"),
height = unit(sum(ww)/sum(hh), "npc"),
))
gridExtra::grid.arrange(grobs = ggi,
layout_matrix = m,
widths = ww/sum(ww),
heights = hh/sum(ww),
vp = grid::viewport(
width = unit(ifelse(sum(hh)<sum(ww), 1, sum(hh)/sum(ww))), "npc"),
height = unit(ifelse(sum(hh)<sum(ww), sum(ww)/sum(hh), 1)), "npc")
gridExtra::grid.arrange(grobs = ggi,
layout_matrix = m,
widths = ww/sum(ww),
heights = hh/sum(ww),
vp = grid::viewport(
width = unit(ifelse(sum(hh)<sum(ww), 1, sum(hh)/sum(ww))), "npc"),
height = unit(ifelse(sum(hh)<sum(ww), sum(ww)/sum(hh), 1), "npc"))
gridExtra::grid.arrange(grobs = ggi,
layout_matrix = m,
widths = ww/sum(ww),
heights = hh/sum(ww),
vp = grid::viewport(
width = unit(ifelse(sum(hh)<sum(ww), 1, sum(hh)/sum(ww)), "npc")),
height = unit(ifelse(sum(hh)<sum(ww), sum(ww)/sum(hh), 1), "npc"))
visu_terra_plot <- function(rr, col = c("blue", "beige", "red"),
brk = "linear", qmm = c(.05, .95), n =  20){
# TÃ¨nements
s <- dc("shp") %>% group_by(CCOD_FRT) %>% summarise() %>% st_cast("POLYGON")
rrc <- map(1:nrow(s), ~ rr %>% crop(s %>% slice(.x)))
ta0 <- map_dfc(rrc, ~dim(.x)) %>% t() %>% as.data.frame() %>%
mutate(id = row.names(.) %>% as.factor() %>% as.numeric())
for(n in 1:(nrow(ta)-1)){
if(n==1){
assign(paste0("ta",n), get(paste0("ta",n-1)) %>%
mutate(pv1 = V1/sum(V1), pv2 = V2/sum(V2)) %>% arrange(desc(V1)))
}else{
assign(paste0("ta",n), get(paste0("ta",n-1)) %>% slice(-1) %>%
mutate(pv1 = V1/sum(V1), pv2 = V2/sum(V2)) %>% arrange(desc(V1)))
}
tmp <- get(paste0("ta",n))
assign(paste0("dim",n), ifelse(tmp$pv1[1]>tmp$pv2[1], "row", "col"))
assign(paste0("idA",n), tmp %>% slice(1) %>% pull(id))
assign(paste0("idB",n), tmp %>% slice(-1) %>% pull(id))
}
hh <- ww <- 0
m <- NULL
for(n in (nrow(ta)-1):1){
ida <- get(paste0("idA", n))
idb <- get(paste0("idB", n))
dima <- get(paste0("dim", n))
if(is.null(m)){
m <- matrix(c(ida, idb),
ncol = ifelse(dima == "row", 2, 1))
hw <- ta %>% filter(id %in% c(ida, idb)) %>% pull(ifelse(dima=="row", V2, V1)) %>% max()
wh <- c(
ta0 %>% filter(id %in% c(ida)) %>% pull(ifelse(dima!="row", V2, V1)) ,
ta0 %>% filter(id %in% c(idb)) %>% pull(ifelse(dima!="row", V2, V1))
)
if(dima=="row"){
hh <- hw; ww <- wh
}else{
hh <- wh; ww <- hw
}
}else if(dima == "col"){
m <- rbind(rep(ida, ncol(m)), m)
hh <- c(ta0 %>% filter(id == ida) %>% pull(V2), hh)
wi <- ta0 %>% filter(id == ida) %>% pull(V1)
ww <- ww*max(1, wi/sum(ww))
}else{
m <- cbind(rep(ida, nrow(m)), m)
ww <- c(ta0 %>% filter(id == ida) %>% pull(V1), ww)
hi <- ta0 %>% filter(id == ida) %>% pull(V2)
hh <- hh*max(1, hi/sum(hh))
}
}
m
# bins
borne <- values(rr) %>% quantile(probs=qmm, na.rm=TRUE)
if(brk == "quantile"){
breaks <- c(-Inf,
quantile(values(rr), na.rm = TRUE,
probs = qmm[1] + (qmm[2]-qmm[1])/(n-2) * 0:(n-2)),
+Inf)
}
if(brk == "linear"){
breaks <- c(-Inf,
borne[1] + (borne[2]-borne[1])/(n-2) * 0:(n-2)) %>% util.round()
}
shp <- dc("shp") %>% select(id) %>% as("SpatVector")
ggspatial::df_spatial(rr)
ggi <- map(1:length(rrc),
~ggplot()+
tidyterra::geom_spatraster(data=rrc[[.x]])+
scale_fill_stepsn(colors = col, breaks = breaks,
guide = "legend",
values = c(0,.5,1),
na.value = "white")+
# tidyterra::scale_fill_whitebox_b(palette = "muted", breaks=breaks)+
tidyterra::geom_spatvector(data=shp  %>% crop(rrci[[.x]]), fill=NA)+
# geom_spatvector_label(data=shp  %>% crop(rrci[[.x]]), mapping = aes(label = id))+
ggplot2::theme_void()+
ggspatial::annotation_scale(height = unit(0.1, "cm"))+
theme(legend.position = ifelse(.x==id_c1, "bottom","none"),
legend.key.width=unit(50,"pt"),
legend.key.height = unit(5,"pt"),
legend.title = element_blank(),
legend.margin = margin(b = 5, l = 5),
plot.title.position = "panel",
panel.border = element_rect(colour = "gray", fill = NA)
)+
# aspect.ratio = ta$V1[.x]/ta$V2[.x])+
labs(title = ifelse(.x==id_c1, names(rr),""))
)
print(m); print(ww);print(hh)
fr_row <- apply(m, 2, unique) %>% unlist() %>% table() %>% as.numeric()
wiw <- ta0 %>% pull(V2)
ww <- apply(m, 2, function(x) wiw[x[which(fr_row[x]==1)]] %>% unlist() %>% unique() %>% max())
fr_col <- apply(m, 1, unique) %>% unlist() %>% table() %>% as.numeric()
hih <- ta0 %>% pull(V1)
hh <- apply(m, 1, function(x) hih[x[which(fr_col[x]==1)]] %>% unlist() %>% unique() %>% max())
# gg3 <- gridExtra::arrangeGrob(ggi[[idA3]], ggi[[idB3]], ncol = ifelse(dim3=="row", 2, 1),
#                               padding = unit(0.1, "line"),
#                               widths = ta0 %>% filter(id %in% c(ida3, idB3)) %>% pull(V1))
# gg2 <- gridExtra::arrangeGrob(ggi[[idA2]], gg3, ncol = ifelse(dim2=="row", 2, 1),
#                               padding = unit(0.1, "line"))
# gg1 <- gridExtra::arrangeGrob(ggi[[idA1]], gg2, ncol = ifelse(dim1=="row", 2, 1),
#                               padding = unit(0.1, "line"))
#
# gridExtra::grid.arrange(gg1, padding = unit(0, "line"))
gridExtra::grid.arrange(grobs = ggi,
layout_matrix = m,
widths = ww/sum(ww),
heights = hh/sum(ww),
vp = grid::viewport(
width = unit(ifelse(sum(hh)<sum(ww), 1, sum(hh)/sum(ww)), "npc")),
height = unit(ifelse(sum(hh)<sum(ww), sum(ww)/sum(hh), 1), "npc"))
}
message("ww = ", paste(ww))
message("ww = ", paste(ww, collapse = " "))
source("/var/user/sdumas/oiseauX/oiseauVisu/R/visu_terra_plot.R", echo=TRUE)
library(oiseauAcces)
library(ggplot2)
library(kableExtra)
library(flextable)
library(officer)
library(tidyterra)
flx <- function(ft){
message("====== FONCTION flx_standard ====== [fct.R]")
ft <- merge_h(ft, part = "header")
ft <- merge_v(ft, part = "header")
ft <- bold(ft, part = "header")
ft <- empty_blanks(ft)
ft <- align(ft, align = "center", part = "all")
ft <- align(ft, align = "center")
ft <- padding(ft, padding.left = 0, padding.right = 0)
ft <- autofit(ft)
return(ft)
}
data_ouvrir_proj("SS", "sdumas")
ddc <- function(x) file.path(dc("dos_projet"), x)
source("/var/user/sdumas/oiseauX/fct_eam_stsulpice.R")
r <- ana_r(recalc = F)
r$cvt_evo_renouv <- uRast("evo_renouv100") %>% as.factor()
r$cvt_evo_futaie <- uRast("evo_futaie100") %>% as.factor()
r <- r %>% mask(dc("shp") %>% as("SpatVector"))
tr <- data_trouees2(10)
keep
clu
debugSource("/var/user/sdumas/oiseauX/oiseauData/R/data_trouees2.R", echo=TRUE)
tr <- data_trouees2(10)
visu_terra_plot(tr)
tr
debugSource("/var/user/sdumas/oiseauX/oiseauData/R/data_trouees2.R", echo=TRUE)
debugSource("/var/user/sdumas/oiseauX/oiseauData/R/data_trouees2.R", echo=TRUE)
tr <- data_trouees2(10)
tr
visu_terra_plot(tr)
clu=tr
unique(values(clu))
debugSource("/var/user/sdumas/oiseauX/oiseauData/R/data_trouees2.R", echo=TRUE)
tr <- data_trouees2(10)
visu_terra_plot(tr)
tr
library(oiseauAcces)
library(ggplot2)
library(kableExtra)
library(flextable)
library(officer)
library(tidyterra)
flx <- function(ft){
message("====== FONCTION flx_standard ====== [fct.R]")
ft <- merge_h(ft, part = "header")
ft <- merge_v(ft, part = "header")
ft <- bold(ft, part = "header")
ft <- empty_blanks(ft)
ft <- align(ft, align = "center", part = "all")
ft <- align(ft, align = "center")
ft <- padding(ft, padding.left = 0, padding.right = 0)
ft <- autofit(ft)
return(ft)
}
data_ouvrir_proj("SS", "sdumas")
ddc <- function(x) file.path(dc("dos_projet"), x)
source("/var/user/sdumas/oiseauX/fct_eam_stsulpice.R")
r <- ana_r(recalc = F)
r$cvt_evo_renouv <- uRast("evo_renouv100") %>% as.factor()
r$cvt_evo_futaie <- uRast("evo_futaie100") %>% as.factor()
r <- r %>% mask(dc("shp") %>% as("SpatVector"))
codes <- data_typo_evo()
source("/var/user/sdumas/oiseauX/oiseauVisu/R/visu_terra_plot.R", echo=TRUE)
visu_terra_plot(r$topo_TPI)
source("/var/user/sdumas/oiseauX/oiseauVisu/R/visu_terra_plot.R", echo=TRUE)
visu_terra_plot(r$topo_TPI)
source("/var/user/sdumas/oiseauX/oiseauVisu/R/visu_terra_plot.R", echo=TRUE)
visu_terra_plot(r$topo_TPI)
source("/var/user/sdumas/oiseauX/oiseauVisu/R/visu_terra_plot.R", echo=TRUE)
visu_terra_plot(r$topo_TPI)
source("/var/user/sdumas/oiseauX/oiseauVisu/R/visu_terra_plot.R", echo=TRUE)
visu_terra_plot(r$topo_TPI)
source("/var/user/sdumas/oiseauX/oiseauData/R/data_trouees2.R", echo=TRUE)
source("/var/user/sdumas/oiseauX/oiseauData/R/data_trouees2.R", echo=TRUE)
data_trouees2(10)
library(oiseauSpot)
library(oiseauAcces)
util_get_frt("MARTIGNA")
data_new_projet("martignat", shp = util_get_frt("MARTIGNA", agence = "8805"))
data_new_projet("martignat", shp = util_get_frt("MARTIGNA", agence = "8805"), ide = "ug")
data_new_projet("martignat", shp = util_get_frt("MARTIGNA", agence = "8805"), ide = "ug", replace = TRUE)
data_ini()
data_ini()
names(m)
mnh
fls <- list.files(dir, full.names = TRUE, pattern = ifelse(origine == "local", "", ".tif"))
dir
dir <- sources[1]
fls <- list.files(dir, full.names = TRUE, pattern = ifelse(origine == "local", "", ".tif"))
fls <- fls[which(startsWith(basename(fls), "mnh"))]
blocs_fls_sub <- (strsplit(basename(fls), "_") %>% as.data.frame() %>% as.matrix())[2,] %>% as.character()
blocs_fls <- stringr::str_sub(blocs_fls_sub, 1, 2)
grille_fls <- grille %>% dplyr::filter(bloc %in% blocs_fls) %>%
dplyr::group_by(bloc) %>%
dplyr::summarise(geometry = sf::st_union(geometry))
inter <- sf::st_intersection(e %>% dplyr::select(id), grille_fls %>% sf::st_transform(sf::st_crs(e)))
blc <- unique(inter$bloc)
message("Bloc(s) utilisÃ©(s): ", paste(blc, collapse = ", "))
ls_rst <- purrr::map(blc,
~ terra::rast(fls[which(blocs_fls == .x)]) %>% terra::crop(e))
e
terra::rast(fls[which(blocs_fls == "PJ")]) %>% terra::crop(e)
terra::rast(fls[which(blocs_fls == "PJ")])
fls[which(blocs_fls == "PJ")]
data_ini()
util_console_table(uDates())
data = "tout"
alias_tables <- tabs <- .p$attrs %>%
dplyr::filter(classe %in% c("nc")) %>%
dplyr::mutate(alias_tab = stringr::str_replace(alias, "ras_", "tab_")) %>%
dplyr::pull(alias_tab)
tabs <- .p$attrs %>%
dplyr::filter(classe %in% c("csv")) %>%
dplyr::filter(alias %in% alias_tables) %>%
dplyr::pull(value)
tabs_ok <- tabs[file.exists(tabs)]
tbs_ls <- purrr::map(tabs_ok,
~ util_read_csv(.x) %>%
dplyr::mutate(date = as.character(date)))
tb <- do.call(rbind, tbs_ls) %>% dplyr::select(-id)
if(data != "tout"){
tb <- tb %>% dplyr::filter(var %in% data)
}
tb
tb %>% group_by(var, date) %>%
summarise(origine = paste(origine))
tb %>% group_by(var, date) %>%
summarise(origine = paste(origine, collapse = "+"))
data_couvert()
visu_evolution()
browseURL("/var/partage/oiseau/projets_suivi/sdumas/martignat/lfl_evo.html")
cv <- data_couvert()
library(oiseauSpot)
