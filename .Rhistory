}
if(! name1 %in% names(rcr)){
ind <- spot_indice(date_spot = date1, indice = indice)
}
rcr <- uRast("crowns", path = path_crowns_ts)
ind_diff <- terra::scale(rcr[[name1]])-terra::scale(rcr[[name0]])
# date du raster des couronnes à utiliser --------------------------------
rcr_id <- tryCatch(rcr[[which(names(rcr) == "id")]],
error = function(e){NULL})
if(is.null(rcr_id)){
message("Pas de raster CROWNS: les différences sont renvoyées par pixel.")
return(ind_diff)
}
diff_date <- abs(date0 - terra::time(rcr_id))
cr_id <- rcr_id[[which(diff_date == min(diff_date))]]
cr <- cr_id %>% terra::as.polygons()
e <- terra::extract(ind_diff, cr, fun = median, na.rm = TRUE)
shp <- cr %>% sf::st_as_sf() %>%
dplyr::mutate(diff = e[[2]])
diff <- as(shp, "SpatVector") %>% terra::rasterize(ind_diff, "diff")
names(diff) <- paste("Dif", indice, date1, date0)
# name(diff) = dif + indice + date1 + date0 (ex: "Dif ndvi 2023-05-06 2022-06-07)
message("Pour afficher, utilisez la fonction spot_plotDiff")
diff
}
spot_differences(2023)
library(oiseauSpot)
{
source("/var/user/sdumas/oiseauX/oiseauTB.R")
user <- "sdumas"
ouvrir_proj("corlier2", user)
# ouvrir_proj("STSULPIC", user)
}
spot_differences(2023)
library(oiseauSpot)
spot_differences(2023)
spot_differences(2023)
date0 <- dates_dispo[which(dates_dispo %>% format("%Y") %>% as.numeric() < an1)][1]
dates_dispo[which(dates_dispo %>% format("%Y") %>% as.numeric() < an1)]
date0 <- max(dates_dispo[which(dates_dispo %>% format("%Y") %>% as.numeric() < an1)])
unlink(dc("tab_crowns"))
unlink(dc("path_crowns_ts"))
library(oiseauSpot)
spot_differences(2023)
uRast("crowns")
source("/var/user/sdumas/oiseauX/oiseauSpot/R/spot_differences.R", echo=TRUE)
spot_differences(2023)
spot_crowns("last")
spot_differences(2023)
spot_differences(2023)
terra::time(cr0)
cr0
library(oiseauSpot)
spot_differences(2023)
cr0
cr0 <- uRast("crowns", origine = "id", date = date_crowns, path = path_crowns_ts, path_meta = path_tab_crowns)
cr0
origine="-id"
o="crowns"
date="last"
o_simple <- stringr::str_split_fixed(basename(o), "_", 2)[,1]
origine_ <- origine
date_ok <- util_get_date(date, where = o_simple, origine = origine_)
oo <- util.get(o, "ras", interactive)
w <- which(as.character(terra::time(oo)) %in% date_ok)
names(w)
names(oo)
math(origin, "^-")
match(origin, "^-")
match(origine, "^-")
origine
match(origine, "^\\-")
match(origine, "-")
match("^-", origine)
grep("^-", origine)
origine="id"
grep("^-", origine)
gsub("^-", "", origine)
names(oo)
names(oo)[which(names(oo) %in% origine)]
ori <-   gsub("^-", "", origine)
nm <- names(oo)[which(! names(oo) %in% ori)]
nm
source("/var/user/sdumas/oiseauX/oiseauUtil/R/util_acces_simple.R", echo=TRUE)
#' @param o nom du raster
#' @param date date ou an demandée (null pour toutes)
#' @param origine NULL ou origine recherchée ou -origine pour en supprimer (ex: "-spot")
#' @param path chemin inutilisé
#' @param path_meta inutilisé
#'
#' @return spatraster ou message et "ko"
#' @export
#'
#'
uRast <- function(o, date = "all", origine = NULL, path = NULL, path_meta = NULL, interactive = TRUE){
o <- util.deparse(o)
o_simple <- stringr::str_split_fixed(basename(o), "_", 2)[,1]
origine_ <- origine
date_ok <- util_get_date(date, where = o_simple, origine = origine_)
oo <- util.get(o, "ras", interactive)
w <- names(oo)[which(as.character(terra::time(oo)) %in% date_ok)]
if(!is.null(origine)){
if(length(grep("^-", origine)) == 0){
nm <- names(oo)[which(names(oo) %in% origine)]
}else{
ori <-   gsub("^-", "", origine)
nm <- names(oo)[which(! names(oo) %in% ori)]
}
}
wnm <- names(oo)[which((names(oo) %in% w) & (names(oo) %in% nm))]
if(length(wnm) == 0){
message("uRast: aucun raster pour ", o, " à la date ", date,
ifelse(is.null(origine), "", paste(" et avec l'origine ", origine)),
". NULL est retourné.")
return(NULL)
}
oo[[wnm]]
}
uRast("crowns", "last", origine = "id")
uRast("crowns", "last", origine = "-id")
source("/var/user/sdumas/oiseauX/oiseauUtil/R/util_acces_simple.R", echo=TRUE)
{
source("/var/user/sdumas/oiseauX/oiseauTB.R")
user <- "sdumas"
ouvrir_proj("corlier2", user)
# ouvrir_proj("STSULPIC", user)
}
spot_differences(2023)
source("/var/user/sdumas/oiseauX/oiseauUtil/R/util_acces_simple.R", echo=TRUE)
source("/var/user/sdumas/oiseauX/oiseauUtil/R/util_acces_simple.R", echo=TRUE)
spot_differences(2023)
spot_differences(2023)
stringr::str_replace_all(spot_formula(indice), "spot", "spot")
spot
date_spot
spot <- uRast("spot", date = date_spot)
spot
uRast("spot")
uTab("tab_spot")
o="spot"
uTab("spot")
o
date="2022-06-04"
origine=NULL
o <- util.deparse(o)
o_simple <- stringr::str_split_fixed(basename(o), "_", 2)[,1]
origine_ <- origine
date_ok <- util_get_date(date, where = o_simple, origine = origine_)
oo <- util.get(o, "ras", interactive)
oo
w <- names(oo)[which(as.character(terra::time(oo)) %in% date_ok)]
w <- which(as.character(terra::time(oo)) %in% date_ok)
nm <- 1:length(names(oo))
if(!is.null(origine)){
if(length(grep("^-", origine)) == 0){
nm <- which(names(oo) %in% origine)
}else{
ori <-   gsub("^-", "", origine)
nm <- which(! names(oo) %in% ori)
}
}
nm
!is.null(origine)
origine
w <- which(! as.character(terra::time(oo)) %in% date_ok)
nm <- 1:length(names(oo))
if(!is.null(origine)){
if(length(grep("^-", origine)) == 0){
nm <- which(! names(oo) %in% origine)
}else{
ori <-   gsub("^-", "", origine)
nm <- which(names(oo) %in% ori)
}
}
nm <- as.integer(NULL)
if(!is.null(origine)){
if(length(grep("^-", origine)) == 0){
nm <- which(! names(oo) %in% origine)
}else{
ori <-   gsub("^-", "", origine)
nm <- which(names(oo) %in% ori)
}
}
#' @param o nom du raster
#' @param date date ou an demandée (null pour toutes)
#' @param origine NULL ou origine recherchée ou -origine pour en supprimer (ex: "-spot")
#' @param path chemin inutilisé
#' @param path_meta inutilisé
#'
#' @return spatraster ou message et "ko"
#' @export
#'
#'
uRast <- function(o, date = "all", origine = NULL, path = NULL, path_meta = NULL, interactive = TRUE){
o <- util.deparse(o)
o_simple <- stringr::str_split_fixed(basename(o), "_", 2)[,1]
origine_ <- origine
date_ok <- util_get_date(date, where = o_simple, origine = origine_)
oo <- util.get(o, "ras", interactive)
# rasters à supprimer si date et origine demandées
w <- which(! as.character(terra::time(oo)) %in% date_ok)
nm <- as.integer(NULL)
if(!is.null(origine)){
if(length(grep("^-", origine)) == 0){
nm <- which(! names(oo) %in% origine)
}else{
ori <-   gsub("^-", "", origine)
nm <- which(names(oo) %in% ori)
}
}
wnm <- c(w, nm)
if(length(wnm) == length(names(00))){
message("uRast: aucun raster pour ", o, " à la date ", date,
ifelse(is.null(origine), "", paste(" et avec l'origine ", origine)),
". NULL est retourné.")
return(NULL)
}
oo[[-wnm]]
}
uRast("spot", 2021)
source("/var/user/sdumas/oiseauX/oiseauUtil/R/util_acces_simple.R", echo=TRUE)
uRast("mnh", origine = "-spot")
uRast("crowns", origine = "id")
uRast("crowns", 2020, origine = "id")
source("/var/user/sdumas/oiseauX/oiseauUtil/R/util_acces_simple.R", echo=TRUE)
uRast("crowns", 2020, origine = "id")
#' @param o nom du raster
#' @param date date ou an demandée (null pour toutes)
#' @param origine NULL ou origine recherchée ou -origine pour en supprimer (ex: "-spot")
#' @param path chemin inutilisé
#' @param path_meta inutilisé
#'
#' @return spatraster ou message et "ko"
#' @export
#'
#'
uRast <- function(o, date = "all", origine = NULL, path = NULL, path_meta = NULL, interactive = TRUE){
o <- util.deparse(o)
o_simple <- stringr::str_split_fixed(basename(o), "_", 2)[,1]
origine_ <- origine
date_ok <- util_get_date(date, where = o_simple, origine = origine_)
oo <- util.get(o, "ras", interactive)
# rasters à supprimer si date et origine demandées
w <- which(! as.character(terra::time(oo)) %in% date_ok)
nm <- as.integer(NULL)
if(!is.null(origine)){
if(length(grep("^-", origine)) == 0){
nm <- which(! names(oo) %in% origine)
}else{
ori <-   gsub("^-", "", origine)
nm <- which(names(oo) %in% ori)
}
}
wnm <- c(w, nm)
browser()
if(length(wnm) == length(names(oo))){
message("uRast: aucun raster pour ", o, " à la date ", date,
ifelse(is.null(origine), "", paste(" et avec l'origine ", origine)),
". NULL est retourné.")
return(NULL)
}
oo[[-wnm]]
}
uRast("crowns", 2020, origine = "id")
#' @param o nom du raster
#' @param date date ou an demandée (null pour toutes)
#' @param origine NULL ou origine recherchée ou -origine pour en supprimer (ex: "-spot")
#' @param path chemin inutilisé
#' @param path_meta inutilisé
#'
#' @return spatraster ou message et "ko"
#' @export
#'
#'
uRast <- function(o, date = "all", origine = NULL, path = NULL, path_meta = NULL, interactive = TRUE){
o <- util.deparse(o)
o_simple <- stringr::str_split_fixed(basename(o), "_", 2)[,1]
origine_ <- origine
date_ok <- util_get_date(date, where = o_simple, origine = origine_)
oo <- util.get(o, "ras", interactive)
# rasters à supprimer si date et origine demandées
w <- which(! as.character(terra::time(oo)) %in% date_ok)
nm <- as.integer(NULL)
if(!is.null(origine)){
if(length(grep("^-", origine)) == 0){
nm <- which(! names(oo) %in% origine)
}else{
ori <-   gsub("^-", "", origine)
nm <- which(names(oo) %in% ori)
}
}
wnm <- c(w, nm) %>% unique()
if(length(wnm) == length(names(oo))){
message("uRast: aucun raster pour ", o, " à la date ", date,
ifelse(is.null(origine), "", paste(" et avec l'origine ", origine)),
". NULL est retourné.")
return(NULL)
}
oo[[-wnm]]
}
uRast("crowns", 2020, origine = "id")
spot_differences(2023)
{
source("/var/user/sdumas/oiseauX/oiseauTB.R")
user <- "sdumas"
ouvrir_proj("corlier2", user)
# ouvrir_proj("STSULPIC", user)
}
spot_differences(2023)
spot_differences(2023)
wnm <- c(w, nm) %>% unique()
#' @param o nom du raster
#' @param date date ou an demandée (null pour toutes)
#' @param origine NULL ou origine recherchée ou -origine pour en supprimer (ex: "-spot")
#' @param path chemin inutilisé
#' @param path_meta inutilisé
#'
#' @return spatraster ou message et "ko"
#' @export
#'
#'
uRast <- function(o, date = "all", origine = NULL, path = NULL, path_meta = NULL, interactive = TRUE){
o <- util.deparse(o)
o_simple <- stringr::str_split_fixed(basename(o), "_", 2)[,1]
origine_ <- origine
date_ok <- util_get_date(date, where = o_simple, origine = origine_)
oo <- util.get(o, "ras", interactive)
# rasters à supprimer si date et origine demandées
w <- which(! as.character(terra::time(oo)) %in% date_ok)
nm <- as.integer(NULL)
if(!is.null(origine)){
if(length(grep("^-", origine)) == 0){
nm <- which(! names(oo) %in% origine)
}else{
ori <-   gsub("^-", "", origine)
nm <- which(names(oo) %in% ori)
}
}
wnm <- c(w, nm) %>% unique()
if(length(wnm) == length(names(oo))){
message("uRast: aucun raster pour ", o, " à la date ", date,
ifelse(is.null(origine), "", paste(" et avec l'origine ", origine)),
". NULL est retourné.")
return(NULL)
}
if(length(wnm) == 0){
return(oo)
}
oo[[-wnm]]
}
spot_differences(2023)
spot_plotDiff()
dif23 <- spot_differences(2023)
spot_plotDiff(dif23)
spot_plotRGB(2023)
spot_plotRGB(2022:2023)
dif22 <- spot_differences(2022)
spot_plotDiff(dif22)
spot_plotRGB(2021:2022)
dif21 <- spot_differences(2021)
spot_plotDiff(dif21)
spot_plotRGB(2020:2021)
user <- "sdumas"
projet <- "champdor"
creer_proj(projet, user)
data_mnt()
spot_data()
data_mnh_local()
data_mnh_ign("2021-07-01")
spot_crowns()
uDates()
data = "tout"
tabs <- .p$attrs %>%
dplyr::filter(classe %in% c("csv", "nc")) %>%
dplyr::mutate(alias2 = ifelse(classe == "nc", stringr::str_replace(alias, "ras_", "tab_"), "")) %>%
dplyr::filter(alias %in% alias2) %>%
dplyr::pull(value)
tabs <- .p$attrs
tabs <- .p$attrs %>%
dplyr::filter(classe %in% c("csv", "nc"))
tabs <- .p$attrs %>%
dplyr::filter(classe %in% c("csv", "nc")) %>%
dplyr::mutate(alias2 = ifelse(classe == "nc", stringr::str_replace(alias, "ras_", "tab_"), ""))
tabs <- .p$attrs %>%
dplyr::filter(classe %in% c("csv", "nc")) %>%
dplyr::mutate(alias2 = ifelse(classe == "nc", stringr::str_replace(alias, "ras_", "tab_"), "")) %>%
dplyr::filter(alias %in% alias2)
tabs <- .p$attrs %>%
dplyr::filter(classe %in% c("csv", "nc")) %>%
dplyr::mutate(alias2 = ifelse(classe == "nc", stringr::str_replace(alias, "ras_", "tab_"), ""))
View(tabs)
alias_tables <- tabs <- .p$attrs %>%
dplyr::filter(classe %in% c("nc")) %>%
dplyr::mutate(alias_tab = stringr::str_replace(alias, "ras_", "tab_")) %>%
dplyr::pull(alias_tab)
tabs <- .p$attrs %>%
dplyr::filter(classe %in% c("csv")) %>%
dplyr::filter(alias %in% alias_tables) %>%
dplyr::pull(value)
alias_tables
.p$attrs %>%
dplyr::filter(classe %in% c("csv"))
.p$attrs %>% dplyr::select(name, alias)
ini <- oiseauUtil::util_read_csv(system.file("tables/param_proj.csv", package = "oiseauData"))
ini$alias
ini %>% select(name, classe, alias)
ini$alias[ini$classe=="csv"] <- ini$name[ini$classe=="csv"]
ini$alias[which(ini$classe=="csv")] <- ini$name[which(ini$classe=="csv")]
ini %>% select(name, classe, alias)
ini$alias <- stringr::str_replace_all(ini$alias, "cat.", "cat_")
ini %>% select(name, classe, alias)
ini$alias[which(ini$classe=="xls")] <- ini$name[which(ini$classe=="xls")]
ini %>% select(name, classe, alias)
ini$alias <- stringr::str_remove_all(ini$alias, " ")
ini %>% select(name, classe, alias)
ini$alias[which(ini$classe=="shp")] <- ini$name[which(ini$classe=="shp")]
ini %>% select(name, classe, alias)
write.csv(ini, "/var/user/sdumas/oiseauX/oiseauData/inst/tables/param_proj.csv", row.names = F)
ini2 <- oiseauUtil::util_read_csv(system.file("tables/param_proj.csv", package = "oiseauData"))
params=ini
params$value <- params$value0
dos_projet <- file.path(base, projdir, user, projet)
base <- dir_base
projdir <- dir_projdir
projet
dos_projet <- file.path(base, projdir, user, projet)
params$value <- stringr::str_replace_all(params$value, "\\.\\./\\.\\.", dirname(base))
params$value <- stringr::str_replace_all(params$value, "\\.\\.", base)
params$value <- stringr::str_replace_all(params$value, "^\\.", dos_projet)
params <- params %>% rbind(
params %>% dplyr::filter(name == "dos_base") %>%
dplyr::mutate(name = "dos_projet",
alias = name,
descr = "dossier du projet",
value0 = "./",
value = dos_projet, id = 0)
)
write.csv(params,  file.path(dos_projet, "params.csv"), row.names = FALSE)
spot_crowns()
{
source("/var/user/sdumas/oiseauX/oiseauTB.R")
user <- "sdumas"
ouvrir_proj("champdor", user)
# ouvrir_proj("STSULPIC", user)
}
{
source("/var/user/sdumas/oiseauX/oiseauTB.R")
user <- "sdumas"
ouvrir_proj("champdor", user)
# ouvrir_proj("STSULPIC", user)
}
uDates()
spot_crowns()
spot_differences(2023)
uRast("crowns")
{
source("/var/user/sdumas/oiseauX/oiseauTB.R")
user <- "sdumas"
ouvrir_proj("champdor", user)
# ouvrir_proj("STSULPIC", user)
}
uRast("crowns")
spot_differences(2023)
diff23 <- spot_differences(2023)
spot_plotDiff(diff23)
uShp()
data
daz
}
}
visu_plot_add <- function(x = NULL, col = rev(grDevices::terrain.colors(50)),  add_foncier = TRUE, add_id = TRUE, remove_id_prefix = TRUE){
vplot <- function(z, coul, add){
terra::plot(z, col = coul, add = add, axes = FALSE, box = FALSE)
}
fon <- dc("shp") %>% as("SpatVector")
add <- FALSE
if(!is.null(x)){
add <- TRUE
if(x != ""){
vplot(x, col, add)
}
}
if(add_foncier){
vplot(fon, NULL, add)
add <- TRUE
}
# label id -------------------------------------
if(add_id){
id <- dc("shp") %>% dplyr::pull(id) %>%
stringr::str_replace_all("_", ".")
if(remove_id_prefix){
cnt <- length(id)
nb <- 0
while (cnt == length(id) & nb <= stringr::str_length(id[1])) {
nb <- nb + 1
cnt <- length(which(startsWith(id, stringr::str_sub(id[1], 1, nb))))
}
if(nb > 2){
pre <- stringr::str_sub(id[1], 1, nb - 1)
id <- stringr::str_remove(id, paste0("^", pre))
}
}
terra::text(fon, id, inside = TRUE, halo = TRUE)
add <- TRUE
}
}
visu_plot_add()
spot_plotDiff(diff23, ID=12)
spot_plotDiff(diff23, ID="12")
spot_plotDiff(diff23, ID="CHAMPDOR_12")
spot_plotRGB(2022:2023, "CHAMPDOR_12")
spot_plotRGB(2023)
