if(is.na(date0)){
message("Calcul des différences entre l'image SPOT de ", an, " et l'image de l'année précédente est impossible: dates non disponibles: année précédente absente.")
return(NULL)
}
message("Calcul des différences de ", paste(indice, collapse = " + "), " entre ", date0, " et ", date1)
rcr <- uRast("crowns", path = path_crowns_ts)
new <- list()
date_n <- date0
names_n <- paste(indice, date_n)
ind_abs <- indice[which(!names_n %in% names(rcr))]
ind_abs
date_n
names_n
rcr
for(n in ind_abs){
new[[paste(n, date_n)]] <- spot_indice(date_spot = date_n, indice = n)
}
for(date_n in c(date0, date1)){
names_n <- paste(indice, date_n)
ind_abs <- indice[which(!names_n %in% names(rcr))]
for(n in ind_abs){
new[[paste(n, date_n)]] <- spot_indice(date_spot = date_n, indice = n)
}
}
rcr <- uRast("crowns", path = path_crowns_ts)
rcr_id <- tryCatch(rcr[[which(names(rcr) == "id")]],
error = function(e){NULL})
if(is.null(rcr_id)){
message("Pas de raster CROWNS: les différences sont renvoyées par pixel.")
return(ind_diff)
}
diff_date <- abs(date0 %>% as.Date() - terra::time(rcr_id))
cr_id <- rcr_id[[which(diff_date == min(diff_date))]]
cr <- cr_id %>% terra::as.polygons()
indice
indice
i
i <- "ndvi"
name0 <- paste(i, date0)
name1 <- paste(i, date1)
ind_diff <- terra::scale(rcr[[name1]])-terra::scale(rcr[[name0]])
e <- terra::extract(ind_diff[[name1]], cr, fun = median, na.rm = TRUE)
e0 <- terra::extract(ind_diff[[name1]], cr)
e0 <- terra::as.data.frame(c(ind_diff[[name1]], cr_id), cells = TRUE, na.rm = TRUE)
head(e0)
head(e0, 100)
ind_diff
fun_diff <- function(i, date0, date1, cr){
name0 <- paste(i, date0)
name1 <- paste(i, date1)
ind_diff <- terra::scale(rcr[[name1]])-terra::scale(rcr[[name0]])
# e <- terra::extract(ind_diff[[name1]], cr, fun = median, na.rm = TRUE)
#
# shp <- cr %>% sf::st_as_sf() %>%
#   dplyr::mutate(diff = e[[2]])
#
#
# diff <- as(shp, "SpatVector") %>% terra::rasterize(ind_diff, "diff")
names(ind_diff) <- paste("Dif", i, date1, date0)
ind_diff
}
if(inherits(indice, "character")) indice <- list(indice)
diffs <- purrr::map(indice, ~ fun_diff(.x, date0, date1, cr))
library(oiseauSpot)
ras_dif <- spot_differences(date1)
date1
ras_dif <- spot_differences(date1)
an
as.numeric(an) == 0
dates
dates_spot <- uDates("spot") %>% dplyr::pull(date) %>% as.Date()
date0 <- max(dates_spot[which(format(dates_spot, "%Y") < format(date_mnh, "%Y"))])
dates <- c(date0, dates_spot[which(dates_spot > date0)] %>% unique() %>% sort())
dates
library(oiseauSpot)
dates
n=1
date0 <- dates[n]
date1 <- dates[n+1]
message("mise à jour ", as.character(date1), " ....")
ras_dif <- spot_differences(date1)
spot_maj_mnh()
dd <- uRast("deads") %>% uCropId("4 a")
plot(dd)
sp <- uRast("spot") %>% uCropId("4 a")
visu_add_raster(dd, sp, compare = T)
sp
sp23 <- sp[time(sp3)=="2023-09-02"]
sp23 <- sp[time(sp)=="2023-09-02"]
plotRGB(sp23)
sp23 <- sp[[time(sp)=="2023-09-02"]]
plotRGB(sp23)
sp23
terra::plotRGB(sp23)
spot_plotRGB(sp23)
spot_plotRGB(sp)
spot_plotRGB(sp, 2023)
spot_plotRGB(sp, "4 a")
spot_plotRGB(sp, "4 a", an=2023)
spot_plotRGB(2023, "4 a")
spot_plotRGB(2022, "4 a")
spot_plotRGB(2022:2023, "4 a")
dif22 <- spot_differences(2022)
spot_plotDiff(dif22)
spot_plotDiff(dif22 %>% uCropId("4 a"))
spot_indice(date_spot = 2022)
n22 <- spot_indice(date_spot = 2022, indice = "ndvi")
plot(n22)
plot(n22 %>% uCropId("4 a"))
n22 <- spot_indice(date_spot = 2022, indice = "ndvi")
cr <- terra::as.polygons(cr0)
e <- exactextractr::exact_extract(ind, cr, fun = median)
st_as_sf(cr)
e <- exactextractr::exact_extract(ind %>% util_spat2rast(), cr %>% sf::st_as_sf(), fun = median)
e <- exactextractr::exact_extract(ind %>% util_spat2rast(), cr %>% sf::st_as_sf(), fun = "median")
n22 <- spot_indice(date_spot = 2022, indice = "ndvi")
cr0
plot(cr0)
plot(cr0 %>% aggregate(10))
spot_maj_mnh()
1:(length(dates) - 1)
dates
spot_maj_mnh()
plot(ras_dif)
plot(ras_dif %>% uCropId("4 a"))
ras_dif <- spot_differences(date1)
plot(ras_dif %>% uCropId("4 a"))
ras_dif[ras_dif < seuil_diff_spot] <- 0
ras_dif[ras_dif >= seuil_diff_spot] <- 1
spot_maj_mnh()
plot(ras_dif %>% uCropId("4 a"))
date0
source("/var/user/sdumas/oiseauX/oiseauSpot/R/spot_maj_mnh.R")
spot_maj_mnh()
cv_carto_evo_frt()
visu_evolution()
data_dispo()
uRast("evo_futaie10")
ef10 <- uRast("evo_futaie10")
plot(ef10)
er10 <- uRast("evo_renouv10")
plot(er10)
dc("path_deads_ts")
library(oiseauSpot)
library(oiseauSpot)
library(oiseauSpot)
library(oiseauSpot)
library(oiseauSpot)
library(oiseauSpot)
library(oiseauSpot)
library(oiseauSpot)
library(oiseauAcces)
data_ouvrir_proj("observatoire", "sdumas")
dc("shp")
util_ref_crowns_params()
util_ref_crowns_params()
sen <- oiseauSentinel::sen_sentinel_ts(tmin = paste0(spot_date, "-01-01"), tmax = paste0(spot_date, "-12-31"))
spot_date
uDates("spot")
util_get_date(spot_date, "spot")
ansp <- util_get_date(spot_date, "spot") %>% format("%Y")
util_get_date(spot_date, "spot") %>% as.Date
util_get_date(spot_date, "spot") %>% as.Date() %>% format("%Y")
ansp <- util_get_date(spot_date, "spot") %>% as.Date() %>% format("%Y")
library(oiseauSpot)
util_ref_crowns_params()
ansp <- util_get_date(spot_date, "spot") %>% as.Date() %>% format("%Y")
sen <- oiseauSentinel::sen_sentinel_ts(tmin = paste0(ansp, "-01-01"), tmax = paste0(ansp, "-12-31"))
sen1 <- se %>% terra::resample(pile[[1]])
sen1 <- sen %>% terra::resample(pile[[1]])
sen <- oiseauSentinel::sen_sentinel_ts(tmin = paste0(ansp, "-01-01"), tmax = paste0(ansp, "-12-31"))
sen_sentinel_ts
oiseauSentinel::sen_sentinel_ts
ansp="2018"
sen <- oiseauSentinel::sen_sentinel_ts(tmin = paste0(ansp, "-01-01"), tmax = paste0(ansp, "-12-31"))
oiseauData::data_conf("path_sentinel")
.p$path_sentinel
library(oiseauSpot)
library(oiseauAcces)
data_ouvrir_proj("observatoire", "sdumas")
util_ref_crowns_params()
ansp <- util_get_date(spot_date, "spot") %>% as.Date() %>% format("%Y")
sen <- oiseauSentinel::sen_sentinel_ts(tmin = paste0(ansp, "-01-01"), tmax = paste0(ansp, "-12-31"))
sen <- rast(dc("path_sentinel"))
sen1 <- sen %>% terra::resample(pile[[1]])
cr1 <- cr %>% sf::st_centroid()
cr1 <- crowns$id %>% sf::st_centroid()
cr1 <- crowns$id %>% terra::as.polygons() %>% st_as_sf() %>%  sf::st_centroid()
plot(cr1)
data_sen <- terra::extract(sen1, cr1)
sen
data.update_params("tab_sentinel", "tab_spot")
.p$dos_spot
.p$dos_data_spot
data.update_params("dos_data_sentinel", "dos_data_spot")
library(oiseauSpot)
library(oiseauSpot)
library(oiseauAcces)
data_ouvrir_proj("observatoire", "sdumas")
data_conf_ini("observatoire", "sdumas")
data_ouvrir_proj("observatoire", "sdumas")
dc("path_sentinel_ts")
util_re
util_ref_crowns_params()
uRast("mnt", "last")
uRast("mnt", "last")
uRast("mnt", "last")
#' Liste des dates
#'
#' @param data séries pour lesquelles retourner les dates: tout (défaut) ou mnh, spot, deads, crowns
#'
#' @return liste des dates disponibles MNH, Spot, couronnes...
#' @export
#'
uDates <- function(data = "tout"){
# tables métadonnées
alias_tables <- tabs <- .p$attrs %>%
dplyr::filter(classe %in% c("nc")) %>%
dplyr::mutate(alias_tab = stringr::str_replace(alias, "ras_", "tab_")) %>%
dplyr::pull(alias_tab)
tabs <- .p$attrs %>%
dplyr::filter(classe %in% c("csv")) %>%
dplyr::filter(alias %in% alias_tables) %>%
dplyr::pull(value)
tabs_ok <- tabs[file.exists(tabs)]
if(length(tabs_ok) == 0){
message("uDates: pas encore de séries temporelles")
return(NULL)
}
tbs_ls <- purrr::map(tabs_ok,
~ oiseauUtil::util_read_csv(.x) %>%
dplyr::mutate(date = as.character(date)))
tb <- do.call(rbind, tbs_ls) %>% dplyr::select(-id)
if(data != "tout"){
tb <- tb %>% dplyr::filter(var %in% data)
}
tb
}
uRast("mnt", "last")
o_simple <- stringr::str_split_fixed(basename(o), "_", 2)[,1]
origine_ <- origine
date_ok <- util_get_date(date, where = o_simple, origine = origine_)
oo <- util.get(o, "ras", interactive)
uRast("mnt", "last")
uRast("mnt", "last")
o_simple <- stringr::str_split_fixed(basename(o), "_", 2)[,1]
param <- dc("attrs") %>% dplyr::filter(alias == o | name == o)
param <- dc("attrs")
param$name
param$name %>% sort()
param$alias %>% sort()
data_conf_ini("observatoire", "sdumas", replace = TRUE)
data_ouvrir_proj("observatoire", "sdumas")
uRast("mnt")
.p$ras_mnt
.p$attrs <- .p$attrs %>% filter(!duplicated(name))
.p$ras_mnt
uRast("mnt")
dc("attrs", set = .p$attrs)
uRast("mnt")
shp <- dc("shp")
data_new_projet("sdumas", "observatoire", shp = shp)
uRast("mnt")
data_new_projet("sdumas", "observatoire", shp = shp, replace = T)
uRast("mnt")
data_new_projet("sdumas", "observatoire2", shp = shp, replace = T)
uRast("mnt")
util_read_csv(("/var/user/sdumas/oiseauX/oiseauData/inst/tables/param_proj.csv"))
p=util_read_csv(("/var/user/sdumas/oiseauX/oiseauData/inst/tables/param_proj.csv"))
View(p)
p <- p %>% slice(-90)
View(shp)
p$alias[139] <- "ras_composition"
write.csv("/var/user/sdumas/oiseauX/oiseauData/inst/tables/param_proj.csv", row.names = F)
library(oiseauSpot)
data_ouvrir_proj("observatoire", "sdumas")
data_conf_ini("observatoire", "sdumas", replace = TRUE)
uRast("mnt")
library(oiseauSpot)
library(oiseauAcces)
data_ouvrir_proj("observatoire3", "sdumas")
util_load_args(util_ref_crowns_params)
grille_lidarhd <- read_sf(file.path(dc("dos_lidarhd"), "grille"))
blc <- list.files(dc("dos_lidarhd"), pattern = "mnh.*tif") %>% strtrim(6) %>% stringr::str_remove(("mnh_"))
aci <- sf::st_intersection(placettes, grille_lidarhd) %>%
dplyr::mutate(bloc = url_telech %>% dirname() %>% basename()) %>%
dplyr::filter(bloc %in% blc)
params_arbres_pp <- function(i, spec_date){
plac <- aci %>% slice(i)
message("placette ", i, "...")
coo_pla <- sf::st_centroid(plac) %>% sf::st_coordinates()
# sf des arbres (points)
arb <- arbres_ttl %>% dplyr::filter(numdisp == plac$numdisp & numplac== plac$numplac) %>%
dplyr::filter(cycle == max(cycle) & !is.na(azimut) & !is.na(dist) & !is.na(diam)) %>%
dplyr::mutate(X = coo_pla[1], Y = coo_pla[2],
x = sin(azimut / 200 * pi) * dist + X,
y = cos(azimut / 200 * pi) * dist + Y) %>%
sf::st_as_sf(coords = c("x", "y"))
sf::st_crs(arb) <- 2154
# visu_leaflet_base() %>%
#   addCircleMarkers(data = arb %>% sf::st_transform(4326),weight = 1,
#                    color = rainbow(2)[as.numeric(as.factor(arb$famille))],
#                    radius = ~diam/2
#   )
e <- sf::st_bbox(plac) %>% sf::st_as_sfc() %>% sf::st_buffer(30) %>%
sf::st_as_sf() %>%
mutate(id = "pla")
data_new_projet(user, fake_proj, shp = e, replace = TRUE)
# houppiers -------------------------
data_mnt()
data_mnh(grille_lidarhd = grille_lidarhd)
if(! "lidarhd" %in% uDates()$origine) return(NULL)
spot_data(spec_date = spec_date)
spot_crowns()
spot_crowns_metrics()
metr <- readRDS(list.files(file.path(dc(dos_modeles)), pattern = ".rds", full.names = TRUE))
cr <- uRast("crowns") %>% terra::as.polygons() %>% st_as_sf() %>%
left_join(
metr %>%
filter(!duplicated(id) & !is.na(id)),
by = "id") %>%
filter(area > 10)
sf::st_crs(cr) <- 2154
# visu_leaflet_base() %>%
#   addCircleMarkers(data = arb %>% sf::st_transform(4326),weight = 1,
#                    color = rainbow(2)[as.numeric(as.factor(arb$famille))])
# appar --------------------------
i <- sf::st_intersection(arb %>% select(-id), cr)
igc <- i %>% as.data.frame() %>% group_by(id) %>%
summarise(
n = n(),
g = sum(pi * diam1^2 / 40000)
)
igc$ess <- purrr::map_chr(i$id %>% unique() %>% sort(), function(iid){
ii <- i %>% filter(id == iid) %>%
mutate(pp = g/sum(g))
if(length(ii) == 0){
NA_character_
}else if(length(ii) == 1){
ii$groupe[1]
}else{# plusieurs arbres dans une couronne
iie <- ii %>% group_by(groupe) %>%
summarise(n = n(),
pp = sum(pp))
if(max(iie$pp) > .8){
iie$groupe[which(iie$pp == max(iie$pp))]
}else{
NA_character_
}
}
})
i %>% filter(!duplicated(as.character(id))) %>%
arrange(id) %>%
left_join(igc, by = "id") %>%
filter(!is.na(ess))
# visu_leaflet_base() %>%
#   addCircleMarkers(data = cal %>% sf::st_transform(4326),weight = 1,
#                    color = rainbow(2)[as.numeric(as.factor(arb$famille))]
#   )
}
aci <- aci %>% slice(1:10)
ls_cal <- purrr::map(1:nrow(aci), ~tryCatch(
{
message("Placette ", .x, "/", nrow(aci))
suppressMessages(suppressWarnings(params_arbres_pp(.x, spec_date = spec_date)))
},
error = function(e){NULL}))
ls00 <- ls_cal[! purrr::map_lgl(ls_cal, is.null)]
cal <- do.call(rbind, ls00) #%>% select(any_of(c("groupe", names(cr))))
ls00$
ls00[[1]]
ls00[[2]]
purrr::map2_chr(ls00, names)
purrr::map2_chr(ls00, ~names(.x))
purrr::map_chr(ls00, ~names(.x))
purrr::map(ls00, ~names(.x))
purrr::map_dbl(ls00, ~length(names(.x)))
cal <- do.call(rbind, ls00) #%>% select(any_of(c("groupe", names(cr))))
mn <- names(ls00[[1]])
purrr::map_lgl(ls00, ~(names(.x) == mn))
purrr::map_lgl(ls00, ~all(names(.x) == mn))
mn2 <- names(ls00[[2]])
mn2[which(mn2 != mn)]
mn
mn2[which(mn2 != mn)]
mn[which(startsWith("B7"))]
mn[which(startsWith(mn ,"B7"))]
mn[which(mn != mn2)]
dt <- data.frame(nm = nm, nm2=nm2)
dt <- data.frame(mm = mn, mn2=mn2)
View(dt)
dates_sen <- purrr::map(ls00, ~ unique(
stringr::str_split(
names(.x), "_x_", simplify = TRUE)[,2]
)
cal <- do.call(rbind, ls00) #%>% select(any_of(c("groupe", names(cr))))
dates_sen <- purrr::map(ls00, ~ unique(
stringr::str_split(
names(.x), "_x_", simplify = TRUE)[,2]
))
dates <- unique(unlist(dates_sen))
dates
dates <- unique(unlist(dates_sen)) %>% sort()
dates
names(ls00[[1]])
ls000 <- purrr:map(ls00, ~ .x[, which(!endsWith(names(.x)) | !stringr::str_detect(names(.x), "_x_"))]
cal <- do.call(rbind, ls00) #%>% select(any_of(c("groupe", names(cr))))
ls000 <- purrr:map(ls00, ~ .x[, which(!endsWith(names(.x)) | !stringr::str_detect(names(.x), "_x_"))])
ls000 <- purrr::map(ls00, ~ .x[, which(!endsWith(names(.x)) | !stringr::str_detect(names(.x), "_x_"))])
ls000 <- purrr::map(ls00, ~ .x[, which(endsWith(names(.x), "01") | !stringr::str_detect(names(.x), "_x_"))])
cal <- do.call(rbind, ls000) #%>% select(any_of(c("groupe", names(cr))))
path <- file.path(dest_dir, paste0(dest_name, ".rds"))
path
# message("!!!!!!!! enregistré sous le dossier courant !!!!!!!!!!!!!!!!!")
#   saveRDS(cal, "crown_ess_ain-res1-spot2018.rds") # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
saveRDS(cal, path)
message("données de calibration sauvegardées sous ", path)
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
m <- util_model_ess_crowns("/var/partage/oiseau/modeles/crown_ess_ain-res1-spot2018.rds")
path_cal <- "/var/partage/oiseau/modeles/crown_ess_ain-res1-spot2018.rds"
cal0 <- readRDS(path_cal)
cal0$numplac %>% unique()
path_cal <- "/var/partage/oiseau/modeles/crown_ess_ain-res1-spot2018.rds"
path_cal <- "/var/partage/oiseau/modeles/crown_ess_ain_res1-spot2018.rds"
cal0 <- readRDS(path_cal)
cal0 <- cal0 %>% as.data.frame() %>%
select(-c(id, geometry)) %>%
mutate(ess = as.factor(ess))
cal <- cal0[, c((which(names(cal0) == "topo_alti_moy")):(length(names(cal0))))]
cal <- cal %>% select(-c(n, g.y)) %>%
relocate(ess)
(na_x <- purrr::map_int(names(cal), ~sum(is.na(cal[[.x]]))) / nrow(cal))
(cl_x <- purrr::map_chr(names(cal), ~paste(class(cal[[.x]]), collapse = "+")))
cal_ <- cal %>% na.omit() %>%
select(-ends_with('moy')) %>%
select(-(starts_with('topo_') & ! ends_with("med")))
cal_gr <- cal_ %>% mutate(
ess = as.character(ess),
ess = ifelse(! ess %in% c("S.P", "EPC", "HET"), "DIV", ess),
ess = as.factor(ess))
cal_div <- cal_gr %>% mutate(div = cal_$ess) %>%
filter(ess == "DIV") %>%
mutate(ess = as.factor(as.character(div))) %>%
select(-div)
ls_mod <- purrr::map(list(cal_gr, cal_div), function(cal_x){
sel <- varSelRF::varSelRF(xdata = cal_x %>% select(-ess), Class = cal_x$ess,
whole.range = TRUE)
sv <- sel$selec.history
sv$num <- 1:nrow(sv)
plot(sv %>% select(Number.Variables, OOB), type = "n")
text(sv$Number.Variables, sv$OOB, sv$num, offset = 1, col = "red")
choix <- utils::select.list(sv$num, title = "Sélectionner un modèle")
(vars <- sv$Vars.in.Forest[choix] %>% as.character() %>% strsplit(" \\+ ") %>% unlist)
model <- randomForest::randomForest(cal_x$ess ~ ., data = cal_x %>% select(vars),
importance = TRUE)
model
})
message(paste(sv %>% mutate(val = paste(Number.Variables, OOB)) %>% pull(val)))
cal_x <- cal_gr
sel <- varSelRF::varSelRF(xdata = cal_x %>% select(-ess), Class = cal_x$ess,
whole.range = TRUE)
sv <- sel$selec.history
sv$num <- 1:nrow(sv)
message(paste(sv %>% mutate(val = paste(Number.Variables, OOB)) %>% pull(val)))
message(paste(sv %>% mutate(val = paste(Number.Variables, round(OOB*100))) %>% pull(val)))
sv
message(paste(sv %>% mutate(val = paste(Number.Variables, round(OOB*100))) %>% pull(val)))
sv <- sel$selec.history
sv <- sv %>% mutate(num = 1:nrow(sv),
nb = max(num) - num)
message(paste(sv$nb, round(sv$OOB*100), sep=" : "))
message(paste(sv$nb, round(sv$OOB*100), sep=" : ", collapse = " ||"))
message(paste(crayon::green(sv$nb), crayon::blue(paste0(round(sv$OOB*100), "%"), sep=" : ", collapse = " | "))
plot(sv %>% select(Number.Variables, OOB), type = "n")
message(paste(crayon::green(sv$nb), crayon::blue(paste0(round(sv$OOB*100), "%")), sep=" : ", collapse = " | "))
message(paste(crayon::inverse(crayon::green(sv$nb)), crayon::blue(paste0(round(sv$OOB*100), "%")), sep=" ", collapse = " | "))
message(paste(crayon::inverse((sv$nb)), crayon::blue(paste0(round(sv$OOB*100), "%")), sep=" ", collapse = " | "))
message(paste(crayon::bgBlue(crayon::white(sv$nb)), crayon::blue(paste0(round(sv$OOB*100), "%")), sep=" ", collapse = " | "))
message(paste(crayon::bgCyan(crayon::white(sv$nb)), crayon::cyan(paste0(round(sv$OOB*100), "%")), sep=" ", collapse = " | "))
message(paste(crayon::bgCyan(crayon::white(sv$nb)), crayon::cyan(paste0(round(sv$OOB*100), "%")), sep="", collapse = " "))
message(paste(crayon::bgCyan(crayon::black(sv$nb)), crayon::cyan(paste0(round(sv$OOB*100), "%")), sep="", collapse = " "))
sv <- sel$selec.history
sv <- sv %>% mutate(num = 1:nrow(sv),
nb = max(num) - num + 1)
message(paste(crayon::bgCyan(crayon::black(sv$nb)), crayon::cyan(paste0(round(sv$OOB*100), "%")), sep="", collapse = " "))
message(paste(crayon::bgCyan(crayon::black(sv$nb)), crayon::cyan(paste0(round(sv$OOB*100), "%")), sep=":", collapse = " "))
message(paste(crayon::bgCyan(crayon::black(sv$nb), crayon::cyan(paste0(round(sv$OOB*100), "%"))), sep=":", collapse = " "))
message(paste(crayon::bgCyan(crayon::black(sv$nb), crayon::black(paste0(round(sv$OOB*100), "%"))), sep=":", collapse = " "))
message(paste(crayon::bgCyan(crayon::black(sv$nb), crayon::bold(paste0(round(sv$OOB*100), "%"))), sep=":", collapse = " "))
message(paste(crayon::bgCyan(crayon::black(sv$nb), crayon::black(crayon::bold(paste0(round(sv$OOB*100), "%")))),
sep=":", collapse = " "))
message(paste(crayon::bgCyan(crayon::blue(sv$nb), crayon::black(crayon::bold(paste0(round(sv$OOB*100), "%")))),
sep=":", collapse = " "))
message(paste(crayon::bgCyan(crayon::red(sv$nb), crayon::black(crayon::bold(paste0(round(sv$OOB*100), "%")))),
sep=":", collapse = " "))
plot(sv %>% select(nb, OOB), type = "n")
text(sv$nb, sv$OOB, sv$num, offset = 1, col = "red")
choix <- utils::select.list(sv$nb, title = "Sélectionner un modèle")
plot(sv %>% select(nb, OOB), type = "n")
text(sv$nb, sv$OOB, sv$num, offset = 1, col = "red")
plot(sv %>% select(nb, OOB), type = "n")
text(sv$nb, sv$OOB, sv$nb, offset = 1, col = "red")
choix <- utils::select.list(1:nrow(sv), title = "Sélectionner un modèle")
choix <- utils::select.list(paste(1:nrow(sv), "variables"), title = "Sélectionner un modèle")
choix <- utils::select.list(1:nrow(sv), title = "Sélectionner un modèle")
(vars <- sv %>% dplyr::filter(nb == choix) %>%
dplyr::pull(Vars.in.Forest) %>% as.character() %>% strsplit(" \\+ ") %>% unlist)
model <- randomForest::randomForest(cal_x$ess ~ ., data = cal_x %>% select(vars),
importance = TRUE)
model <- randomForest::randomForest(cal_x$ess ~ ., data = cal_x %>% select(all_of(vars)),
importance = TRUE)
model
