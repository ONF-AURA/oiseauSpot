#' Raster de prédicteurs pour spatialisation
#'
#' @param topo
#' @param dendro
#' @param spot
#' @param insol
#' @param mnh
#' @param suppress_rasters_with_na retire des prédicteurs les rasters dont le % de valeurs NA est supérieur au nombre donné (100: garde tout, 0: supprime si une valeur absente)
#' @param res resolution du pixel en m
#'
#' @return spatRaster
#' @export
#'
#'
data_predicteurs <- function(topo = TRUE, dendro = TRUE, spot = TRUE, insol = TRUE,
                           mnh = TRUE, sentinel = TRUE, copernicus = TRUE,
                           suppress_rasters_with_na = 100, res = 10,
                           spot_date = "last",
                           vars_topo = c( "slope", "aspect", "TPI", "TRI", "roughness", "flowdir"),
                           vars_mnh = c( "slope", "aspect", "TPI", "TRI", "TRIriley", "TRIrmsd", "roughness", "flowdir"),
                           indices = NULL, rsp_coper = FALSE
){

  mnt <- uRast("mnt", "last") %>% aggregate(res, "mean", na.rm = TRUE)
  names(mnt) <- "topo_alti"

  pile <- mnt

  if(topo){

    message("topographie")

    if("topo.tif" %in% list.files()){

      message("topo.tif du dossier user  utilisé.")
      terr <- rast("topo.tif") %>% project(mnt)
    }else{

      vars_topo[which(stringr::str_detect(vars_topo, "aspect"))] <- "aspect"

      vars_topo <- vars_topo[which(vars_topo != "alti")]


      terr <- terra::terrain(mnt, vars_topo %>% unique)

      names(terr) <- paste0("topo_", names(terr))

      if("aspect" %in% vars_topo){
        terr$topo_aspectNS <-  cos(terr$topo_aspect / 400 * 2*pi)
        terr$topo_aspectEW <-  sin(terr$topo_aspect / 400 * 2*pi)
        terr$topo_aspect <- NULL
      }
    }

    pile <- c(pile, terr)
  }

  if(dendro){

    message("dendrométrie")

    tryCatch({
      dendro <- uRast("dendro") %>% terra::resample(mnt)
      names(dendro) <- paste0("dend_", names(dendro))

      pile <- c(pile, dendro)
    }, error = function(e){warning("Pas de rasters de prédictions dendrométriques.")}
    )
  }

  if(spot){

    message("spot")

    tryCatch({
      spots <- uRast("spot", spot_date)

      if(is.null(indices))
        indices <- spot_formula(list = TRUE)

      for(date in time(spots) %>% unique() %>% as.character()){

        spot <- spots[[time(spots) == date]]

        ind <- purrr::map(indices, ~eval(parse(text = spot_formula(.x))))

        indc <- do.call(c, ind)
        names(indc) <- paste0("spot_", stringr::str_sub(date, 1, 4), "_", indices)

        pile <- c(pile, indc %>% aggregate(res, "mean", na.rm = TRUE))


      }


    }, error = function(e){warning("Pas de rasters Spot.")}
    )
  }

  if(insol){

    message("insolation")

    tryCatch({
      inso <- uRast("insolation", "last") %>% resample(mnt)

      pile <- c(pile, inso)
    }, error = function(e){warning("Pas de rasters d'insolation.")}
    )
  }

  if(mnh){

    message("mnh")

    tryCatch({

      vars_mnh <- vars_mnh[which(vars_mnh != "h")]

      mnh <- uRast("mnh", "last") %>% aggregate(res, "mean", na.rm = TRUE)
      names(mnh) <- "mnh_h"

      mnh0 <- uRast("mnh", "first") %>% aggregate(res, "mean", na.rm = TRUE)
      names(mnh0) <- "mnh_h0"

      terr <- terrain(mnh, vars_mnh)

      names(terr) <- paste0("mnh_", names(terr))
      pile <- c(pile, mnh, terr, mnh0)

    }, error = function(e){warning("Pas de rasters issus du MNH")}
    )
  }

  if(sentinel){

    message("sentinel")

    tryCatch({

      ansp <- util_get_date(spot_date, "spot") %>% as.Date() %>% format("%Y")

      sen <- data_sentinel(tmin = paste0(ansp, "-01-01"), tmax = paste0(ansp, "-12-31"))
      sen <- uRast("sentinel")
      sen1 <- sen %>% terra::resample(pile[[1]])

      names(sen1) <- c("id", paste(names(sen1), terra::time(sen1), sep = "_x_"))
      pile <- c(pile, sen1)

    }, error = function(e){warning("Pas de rasters Sentinel")}
    )
  }

  if(copernicus){

    message("copernicus")

    tryCatch({
      cop <- data_copernicus(resample = rsp_coper) %>% terra::resample(pile[[1]])

      names(cop) <- c(paste(names(cop), terra::time(cop), sep = "_x_"))
      pile <- c(pile, cop)
    }, error = function(e){warning("Pas de rasters Copernicus")}
    )
  }


  pilec <- pile %>% terra::mask(dc("shp") %>% sf::st_buffer(dc("buffer")))

  if(suppress_rasters_with_na < 100){

    message("suppression des variables comportant trop de données manquantes")

    e <- extract(pilec, dc("shp") %>% dplyr::summarise(geometry = sf::st_union(geometry))) %>%
      dplyr::select( - dplyr::any_of(c("Id", "ID", "id")))

    e <- e[purrr::map_lgl(e, ~length(unique(.x)) > 1)]

    nas <- purrr::map_dbl(e, ~ sum(is.na(.x)) / nrow(e))

    layer2rm <- names(e)[which(nas > (suppress_rasters_with_na /100)) & ! startsWith(names(e), "mnh")]

    if(length(layer2rm) > 0){
      message("le ou les rasters suivant(s) sont exclus par le paramètre de filtre fixant à ",
              suppress_rasters_with_na, "% max la proportion de données manquantes:\n\t",
              crayon::red(paste(layer2rm, collapse = "\t")))

      pilec <- pilec[[names(e)[!names(e) %in% layer2rm]]]
    }
  }

  return(pilec)
}
